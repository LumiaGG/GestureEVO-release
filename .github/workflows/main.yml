name: Update APK Download Link

on:
  push:
    paths:
      - 'downloads/**/*.APK'  # Triggered when APK files in downloads directory are updated
  workflow_dispatch:  # Allow manual triggering

jobs:
  update-index-html:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Get full history to find file changes

      - name: Find latest APK file
        id: find-apk
        run: |
          # Try to find APK from current push
          LATEST_APK=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -i '\.APK$' | head -n 1)
          
          # If no APK found in current push, find the latest APK in the repository
          if [ -z "$LATEST_APK" ]; then
            LATEST_APK=$(find downloads -name "*.APK" -type f -o -name "*.apk" -type f | sort -r | head -n 1)
          fi
          
          # If still no APK found, use default path
          if [ -z "$LATEST_APK" ]; then
            LATEST_APK="downloads/app-release.APK"
          fi
          
          echo "Found APK file: $LATEST_APK"
          echo "apk_path=$LATEST_APK" >> $GITHUB_OUTPUT
          
          # Extract version from APK filename if it follows pattern app-v1.2.3.APK
          if [[ "$LATEST_APK" =~ app-v([0-9]+\.[0-9]+\.[0-9]+)\.APK ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            # Try to get modified date as fallback version
            MODIFIED_DATE=$(git log -1 --format=%cd --date=format:"%Y.%m.%d" -- "$LATEST_APK")
            VERSION="$MODIFIED_DATE"
          fi
          
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update index.html
        run: |
          APK_PATH="${{ steps.find-apk.outputs.apk_path }}"
          APK_FILE=$(basename "$APK_PATH")
          
          # Update APK path in index.html
          sed -i "s|const apkPath = './downloads/.*'|const apkPath = './$APK_PATH'|g" index.html
          
          echo "Updated index.html to point to $APK_PATH"

      - name: Update version.json
        run: |
          VERSION="${{ steps.find-apk.outputs.version }}"
          APK_PATH="${{ steps.find-apk.outputs.apk_path }}"
          CURRENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          # Create version.json with version and update information
          cat > version.json << EOF
          {
            "version": "$VERSION",
            "apkPath": "$APK_PATH",
            "lastUpdated": "$CURRENT_DATE"
          }
          EOF
          echo "Created/Updated version.json with version $VERSION"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add index.html version.json
          
          # Only commit if there are actual changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update APK download link to latest version (${{ steps.find-apk.outputs.version }})"
            git pull origin main --rebase
            git push origin main
          fi
